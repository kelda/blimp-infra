apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
  namespace: registry
spec:
  selector:
    matchLabels:
      service: registry
  template:
    metadata:
      labels:
        service: registry
    spec:
      initContainers:
      # Create a self-signed certificate to enable TLS for the registry, and to
      # sign oauth tokens.
      # The generated certificate is written to a shared volume that's mounted
      # by the registry and docker-auth containers.
      - name: cert-generator
        # TODO: Use our own image
        image: frapsoft/openssl
        imagePullPolicy: Always
        args:
          [ "req", "-x509", "-newkey", "rsa:4096",
            "-keyout", "/registry-https-cert/key.pem",
            "-out", "/registry-https-cert/cert.pem",
            "-days", "3650",
            "-nodes",
            "-subj", "/CN=localhost" ]
        volumeMounts:
        - mountPath: /registry-https-cert
          name: registry-https-cert

      containers:
      # A simple nginx proxy that serves 204 on port 8080 and forwards
      # LetsEncrypt HTTP challenges to the letsencrypt container.
      - name: http-nginx
        image: nginx
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: proxy-nginx-conf
      # A nginx reverse proxy that gets a SSL certificate from LetsEncrypt, and
      # forwards traffic to the registry and authentication server.
      - name: letsencrypt
        image: linuxserver/letsencrypt
        env:
          - name: URL
            value: "<REGISTRY_HOSTNAME>"
        volumeMounts:
        - mountPath: /config
          name: lets-encrypt-state
        - mountPath: /config/nginx/site-confs
          name: le-nginx-conf

      - name: registry
        image: registry:2
        env:
          - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
            value: /data
          - name: REGISTRY_AUTH
            value: token
          - name: REGISTRY_AUTH_TOKEN_REALM
            value: "https://<REGISTRY_HOSTNAME>/auth"
          - name: REGISTRY_AUTH_TOKEN_SERVICE
            value: Authentication
          - name: REGISTRY_AUTH_TOKEN_ISSUER
            value: "Blimp Docker Auth"
          - name: REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE
            value: /registry-https-cert/cert.pem
        volumeMounts:
        - mountPath: /registry-https-cert
          name: registry-https-cert
          readOnly: true
        - mountPath: /data
          name: registry-data

      - name: docker-auth
        image: "<DOCKER_AUTH_IMAGE>"
        imagePullPolicy: Always
        args:
          - --v=2
          - --alsologtostderr
          - /config/auth_config.yml
        env:
        - name: BLIMP_CLUSTER_SECRET
          valueFrom:
            secretKeyRef:
              name: cluster-auth
              key: token
        volumeMounts:
        - mountPath: /config
          readOnly: true
          name: docker-auth-conf
        - mountPath: /registry-https-cert
          name: registry-https-cert
          readOnly: true

      volumes:
      - name: lets-encrypt-state
        persistentVolumeClaim:
          claimName: lets-encrypt-pvc
      - name: registry-data
        persistentVolumeClaim:
          claimName: registry-pvc
      - name: registry-https-cert
        emptyDir:
      - name: le-nginx-conf
        configMap:
          name: le-nginx-conf
      - name: proxy-nginx-conf
        configMap:
          name: proxy-nginx-conf
      - name: docker-auth-conf
        configMap:
          name: docker-auth-conf
  strategy:
    type: Recreate
